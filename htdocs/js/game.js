// Generated by CoffeeScript 1.6.3
(function() {
  window.Game = function(lang, graphic, request) {
    var _this = this;
    this.graphic = graphic;
    this.request = request;
    this.mainword = '';
    this.timer = 0;
    this.score = 0;
    this.lettersWeights = null;
    this.correctAnswers = [];
    this.level = 1;
    this.achievScore = 0;
    this.maxAchievScore = 0;
    this.rareLetters = [];
    this.maxLevel = 50;
    this.userId = 0;
    this.userName = '';
    this.isFirst = false;
    this.lang = lang;
    this.used = {
      rareLetters: 0,
      shortWords: 0,
      longWords: 0,
      palindrome: 0,
      anagram: 0,
      expensiveWords: 0
    };
    this.isNewGame = function() {
      var strGameState;
      strGameState = localStorage.getItem('wordGame');
      return strGameState === null || strGameState === "" || strGameState === 'null';
    };
    this.play = function() {
      if (this.isNewGame()) {
        return this.getLanguage('completeSetup');
      } else {
        return this.load();
      }
    };
    this.getLanguage = function(callback) {
      var _this = this;
      return $.getScript("js/game.language." + this.lang + ".js", function() {
        return typeof _this[callback] === "function" ? _this[callback]() : void 0;
      });
    };
    this.completeSetup = function() {
      log('play begins');
      if (this.isNewGame()) {
        $('#modal').modal({
          keyboard: false
        });
      } else {
        this.populateUser();
      }
      this.localize();
      this.initControls();
      this.drawEmpty();
      this.populateTimer();
      this.addScore(0);
      this.graphic.updateLevelBar(this.level, this.score, this.maxLevel, this.nextLevel);
      return this.updateLevel();
    };
    this.localize = function() {
      $('[data-t]').each(function() {
        var key;
        key = $(this).attr('data-t');
        return $(this).text(t[key]);
      });
      $('#showMenu').attr('title', t.menu);
      $('#new').text(t.snew);
      $('#scores').text(t.scores);
      $('#save').text(t.save);
      $('#load').text(t.load);
      $('#username-label').text(t.username);
      return $('#achiev').text(t.achievements);
    };
    this.initControls = function() {
      var _this = this;
      $('#answer').unbind().keyup(function(e) {
        return _this.handleEvents(e);
      });
      $('#enter').unbind().click(function() {
        var press;
        press = jQuery.Event("keyup");
        press.ctrlKey = false;
        press.which = 13;
        press.keyCode = 13;
        return $("#answer").trigger(press);
      });
      $('.box').on('click', '.letter', function() {
        var $letterElement, letter, partWord, press, word;
        $letterElement = $(this);
        letter = $letterElement.text().firstChar();
        partWord = $("#answer").val();
        word = partWord + letter;
        if ($letterElement.hasClass('selected')) {
          $letterElement.removeClass('selected');
          word = $("#answer").val().replace(letter, '');
        } else {
          $letterElement.addClass('selected');
        }
        $("#answer").val(word);
        $("#answer").focus();
        return press = jQuery.Event("keyup");
      });
      $('#showMenu').unbind().click(function() {
        $('#menu').toggle();
        return false;
      });
      $('#new').unbind().click(function() {
        _this.reset();
        return $('#menu').hide();
      });
      $('#scores').unbind().click(function(e) {
        return _this.request.get({
          r: 'user/get-scores'
        }, function(data) {
          _this.showScores(data);
          $('#menu').hide();
          return e.preventDefault();
        });
      });
      $('#save').unbind().click(function() {
        _this.save();
        return $('#menu').hide();
      });
      $('#load').unbind().click(function() {
        _this.load();
        return $('#menu').hide();
      });
      $('#achiev').unbind().click(function(e) {
        _this.showAchievements();
        $('#menu').hide();
        return e.preventDefault();
      });
      $('.input-clear').on('click', function(e) {
        $(this).prev('input').val("").focus();
        $('.letter').removeClass('selected');
        return e.preventDefault();
      });
      $('.close').on('click', function(e) {
        $(this).parent().hide();
        return e.preventDefault();
      });
      $('body').on('click', '.add-word', function(e) {
        _this.addWord($('.add-word-container strong').text());
        return e.preventDefault();
      });
      $('.add-word-close').on('click', function(e) {
        $('#message').fadeOut();
        return e.preventDefault();
      });
      $('#sort-a').toggle(function() {
        _this.correctAnswers.sortA().reverse();
        return _this.populateAnswers();
      }, function() {
        _this.correctAnswers.sortA();
        return _this.populateAnswers();
      });
      $('#sort-l').toggle(function() {
        _this.correctAnswers.sortL().reverse();
        return _this.populateAnswers();
      }, function() {
        _this.correctAnswers.sortL();
        return _this.populateAnswers();
      });
      $('#sort-s').toggle(function() {
        _this.correctAnswers.sortS().reverse();
        return _this.populateAnswers();
      }, function() {
        _this.correctAnswers.sortS();
        return _this.populateAnswers();
      });
      $('.lang[id="lang-#{@lang}"]').addClass('selected');
      $('.lang').unbind().click(function(e) {
        $('.lang').removeClass('selected');
        $(_this).addClass('selected');
        _this.lang = $(_this).attr('data-lang');
        _this.play();
        return e.preventDefault();
      });
      $('#username-enter').unbind().click(function() {
        return _this.enterUsername();
      });
      return $('#username').unbind().keyup(function(e) {
        if (e.keyCode === 13) {
          return $("#username-enter").click();
        }
      });
    };
    this.initAchievements = function() {
      var achievement, tmpAchievements;
      this.maxAchievScore = 0;
      tmpAchievements = (function() {
        var _i, _len, _ref, _results;
        _ref = this.achievements;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          achievement = _ref[_i];
          _results.push(achievement);
        }
        return _results;
      }).call(this);
    };
    this.initRareLetters = function() {
      var letter, _i, _len, _ref, _results;
      this.rareLetters = [];
      _ref = this.lettersWeights;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        letter = _ref[_i];
        if (this.lettersWeights[letter] === maxLetterWeight) {
          _results.push(this.rareLetters.push(letter));
        }
      }
      return _results;
    };
    this.getMainword = function() {
      var idx, mainWordsArr, mainWordsLen;
      mainWordsArr = mainwords[this.lang].split(',');
      mainWordsLen = mainWordsArr.length;
      idx = Math.floor(Math.random() * mainWordsLen);
      return this.mainword = mainWordsArr[idx];
    };
    this.getLetterWeight = function(letter) {
      if (this.lettersWeights === null) {
        this.fillLettersWeights();
      }
      return this.lettersWeights[letter];
    };
    this.fillLettersWeights = function() {
      var letter, maxPercent, rawWeight, weight, _results;
      this.lettersWeights = $.extend(true, {}, letterFrequency[this.lang]);
      maxPercent = 0;
      for (letter in this.lettersWeights) {
        rawWeight = this.lettersWeights[letter];
        if (rawWeight > maxPercent) {
          maxPercent = rawWeight;
        }
      }
      _results = [];
      for (letter in this.lettersWeights) {
        rawWeight = this.lettersWeights[letter];
        weight = rawWeight / maxPercent;
        _results.push(this.lettersWeights[letter] = maxLetterWeight - Math.ceil(maxLetterWeight * weight) + 1);
      }
      return _results;
    };
    this.populateUser = function() {
      return $('#user').text("" + t.hallo + " " + this.userName);
    };
    this.isPalindrome = function(word) {
      return word.length > 4 && this.correctAnswers.containsWord(word.reverse());
    };
    this.isAnagram = function(word) {
      var answer, availableLetters, idx, isAnagram, letter, wordLetters, _i, _j, _len, _len1, _ref;
      if (this.correctAnswers.length < 2 || this.isPalindrome(word || word.length < 5)) {
        return false;
      }
      isAnagram = true;
      wordLetters = word.split('');
      _ref = this.correctAnswers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        answer = _ref[_i];
        isAnagram = true;
        if (word.length !== answer.length || answer.w === word) {
          isAnagram = false;
          continue;
        }
        availableLetters = answer.w.split('');
        for (_j = 0, _len1 = wordLetters.length; _j < _len1; _j++) {
          letter = wordLetters[_j];
          if (!availableLetters.contains(letter)) {
            isAnagram = false;
            continue;
          }
          idx = availableLetters.indexOf(letter);
          if (idx === -1) {
            isAnagram = false;
            continue;
          }
          availableLetters.splice(idx, 1);
        }
        return isAnagram;
      }
    };
    this.isExpensive = function(word) {
      return 50 <= this.getScore(word);
    };
    this.isCorrectWord = function(answer) {
      var answerLetters, answerLettersLen, availableLetters, idx, letter, mainLetters, score, _i, _len;
      mainLetters = this.mainword.split('');
      answerLetters = answer.split('');
      answerLettersLen = answerLetters.length;
      score = this.getScore(answer);
      if (answer.length < minWordLen) {
        return this.error(t.min_word_length.format(minWordLen));
      }
      if (answer === this.mainword) {
        return this.error(t.already_used.format(answer.strong()));
      }
      if (score < minScore) {
        return this.error(t.min_score.format(minScore));
      }
      if (this.correctAnswers.containsWord(answer)) {
        return this.error(t.already_used.format(answer.strong()));
      }
      availableLetters = this.mainword.split('');
      for (_i = 0, _len = answerLetters.length; _i < _len; _i++) {
        letter = answerLetters[_i];
        if (!availableLetters.contains(letter)) {
          return this.error(t.cannot_make.format(answer.strong(), this.mainword.strong()));
        }
        idx = availableLetters.indexOf(letter);
        if (idx === -1) {
          return this.error(t.cannot_make.format(answer.strong(), this.mainword.strong()));
        }
        availableLetters.splice(idx, 1);
      }
      return true;
    };
    this.ask = function(word) {
      var _this = this;
      if (!this.isCorrectWord(word)) {
        return false;
      }
      return this.request.get({
        r: 'dictionary/try',
        word: word
      }, function(data) {
        if (data.isAllowed) {
          return _this.tryAnswer(data.word);
        } else {
          return _this.errorAddWord(t.unknown_word.format(word.strong()));
        }
      });
    };
    this.tryAnswer = function(word) {
      var $answerRow, countLetters, score;
      if (!this.isCorrectWord(word)) {
        return false;
      }
      score = this.getScore(word);
      countLetters = word.length;
      $answerRow = $('<tr><td>' + word + '</td><td>' + countLetters + '</td><td>' + score + '</td></tr>');
      $('#answerContainer table').prepend($answerRow);
      this.addScore(score);
      this.graphic.updateLevelBar(this.level, this.score, this.maxLevel, this.nextLevel);
      this.updateLevel();
      if (this.isPalindrome(word)) {
        this.used.palindrome++;
      }
      if (this.isAnagram(word)) {
        this.used.anagram++;
      }
      if (word.length < 4) {
        this.used.shortWords++;
      }
      if (word.length > 6) {
        this.used.longWords++;
      }
      if (word.containsRare(this.rareLetters)) {
        this.used.rareLetters++;
      }
      if (this.isExpensive(word)) {
        this.used.expensiveWords++;
      }
      this.correctAnswers.push({
        w: word,
        s: score
      });
      this.updateWords();
      this.checkAchievements(word);
      this.save();
      $('.letter').removeClass('selected');
      $('#answerLetters').empty();
      $('#answer').val('');
      $('#answer').focus();
    };
    this.getScore = function(word) {
      var letter, letters, lettersLen, score, _i, _len;
      score = 0;
      letters = word.split('');
      lettersLen = letters.length;
      for (_i = 0, _len = letters.length; _i < _len; _i++) {
        letter = letters[_i];
        score += this.getLetterWeight(letter);
      }
      return score;
    };
    this.addScore = function(score) {
      var _this = this;
      this.score = parseInt(this.score + score, 10);
      $('#score').text(t.score + ': ' + this.score);
      return this.request.get({
        r: 'user/set-score',
        score: this.score
      }, function(data) {
        _this.isFirst = (data != null) && data.isFirst;
      });
    };
    this.updateLevel = function() {
      if (this.level >= this.maxLevel) {
        return false;
      }
      return $('#level').text(t.level + ': ' + this.level);
    };
    this.updateWords = function() {
      return $('#words').text(t.words + ': ' + this.correctAnswers.length);
    };
    this.nextLevel = function() {
      if (this.level >= this.maxLevel) {
        return false;
      }
      this.level++;
      this.getMainword();
      return this.draw();
    };
    this.populateTimer = function() {
      return $('#timer').text(t.time + ': ' + this.timer.formatTime());
    };
    this.setTimer = function() {
      var _this = this;
      this.populateTimer();
      this.timer++;
      setTimeout(function() {
        return _this.setTimer();
      }, 1000);
      this.checkAchievements({
        type: 'time'
      });
    };
    this.checkAchievements = function(arg) {
      var achievement, header, regExp, type, word, _i, _len, _ref;
      type = '';
      word = '';
      if (typeof arg === 'object') {
        type = arg.type;
      } else {
        word = arg;
      }
      _ref = this.achievements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        achievement = _ref[_i];
        achievement.fn;
        regExp = new RegExp(type);
        if (type && !regExp.test(achievement.n)) {
          continue;
        }
        if (typeof fn !== 'function') {
          continue;
        }
        if (!achievement.isCompleted && fn.apply(this, [word, achievement.p])) {
          header = achievement.header + ' +' + achievement.s;
          this.graphic.message(header, achievement.description, 'achievement');
          achievement.isCompleted = true;
          achievement.date = new Date();
          this.graphic.updateLevelBar(this.level, this.score, this.maxLevel, this.nextLevel);
          this.updateLevel();
          this.updateWords();
          log('achiev ' + score);
          this.achievScore += achievement.s;
        }
      }
    };
    this.drawEmpty = function() {
      var $mainContainer, $weight, i, letter, weight, _i;
      $mainContainer = $('.box');
      $mainContainer.empty();
      for (i = _i = 0; _i <= 9; i = ++_i) {
        letter = 'х';
        weight = 6;
        $weight = $('<div>').attr('class', 'weight w' + weight).text(weight);
        $('<div>').attr({
          'class': 'letter'.text(letter).append($weight).appendTo($mainContainer)
        });
      }
      return $mainContainer.append('<div class="clear" />');
    };
    this.draw = function() {
      var $mainContainer, $weight, letter, mainLetters, weight, _i, _len;
      mainLetters = this.mainword.split('');
      $mainContainer = $('.box');
      $mainContainer.empty();
      for (_i = 0, _len = mainLetters.length; _i < _len; _i++) {
        letter = mainLetters[_i];
        weight = this.getLetterWeight(letter);
        $weight = $('<div>').attr('class', 'weight w' + weight).text(weight);
        $('<div>').attr({
          'class': 'letter'
        }).text(letter).append($weight).appendTo($mainContainer);
      }
      return $mainContainer.append('<div class="clear" />');
    };
    this.handleEvents = function(e) {
      switch (e.keyCode) {
        case 13:
          if (!$('#answer').val()) {
            return false;
          }
          graphic.animateAnswer();
          this.ask($('#answer').val());
          return e.preventDefault();
        case 27:
          $('#answerLetters').empty();
          $('#answer').val('');
          $('.letter').removeClass('selected');
          return e.preventDefault();
        case 8:
          this.animateLetters();
          return e.preventDefault();
        default:
          return this.animateLetters();
      }
    };
    this.animateLetters = function() {
      var $letterElement, letter, word, _i, _len, _results;
      word = $('#answer').val();
      $('.letter').removeClass('selected');
      _results = [];
      for (_i = 0, _len = word.length; _i < _len; _i++) {
        letter = word[_i];
        $letterElement = $(".letter:contains('" + letter + "'):not('.selected'):first");
        _results.push($letterElement.addClass('selected'));
      }
      return _results;
    };
    this.error = function(message) {
      this.graphic.message(t.error, message, '');
      return false;
    };
    this.errorAddWord = function(message) {
      message = "<div class='add-word-container'>" + message + "</div>";
      message += " <a href='#'' class='add-word'>" + t.add_word + "</a>";
      this.graphic.message(t.error, message, '', 10000000);
      return false;
    };
    this.addWord = function(word) {
      var _this = this;
      return this.request.get({
        r: 'dictionary/add-word',
        word: word,
        userId: this.userId
      }, function(data) {
        if (data.success) {
          _this.tryAnswer(data.word);
          $('.jGrowl-close').click();
          return _this.graphic.message(t.message, t.word_added.format(word.strong()), '');
        }
      });
    };
    this.showAchievements = function() {
      var achievement, achievementsContent, completedClass, header, iconName, iconStyle, item, _i, _len, _ref;
      header = t.achievements + ' ' + this.achievScore + ' / ' + this.maxAchievScore;
      achievementsContent = '';
      this.achievements = this.achievements.sortC();
      _ref = this.achievements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        achievement = _ref[_i];
        if (typeof achievement.date === 'string') {
          achievement.date = new Date(achievement.date);
        }
        iconName = achievement.n;
        if (achievement.p !== 'undefined') {
          iconName += achievement.p;
        }
        iconStyle = 'background-image: url(img/achievements/' + iconName + '.png)';
        completedClass = achievement.isCompleted ? ' completed ' : '';
        item = '<div class="ach-item ' + completedClass + '">\
            <div class="icon" style="' + iconStyle + '"></div>\
            <div class="header">' + achievement.header + '</div>\
            <div class="description">' + achievement.description + '</div>\
            <div class="score"><div class="value">' + achievement.s + '</div>';
        if (achievement.date) {
          item += "<div class='date'>" + (achievement.date.format()) + "</div>";
        }
        item += '</div></div>';
        achievementsContent += item;
      }
      return this.graphic.getWindow($('#win-achievements'), header, achievementsContent);
    };
    this.showScores = function(scores) {
      var content, header, i, score, _i, _len;
      header = t.scores;
      content = '';
      for (i = _i = 0, _len = scores.length; _i < _len; i = ++_i) {
        score = scores[i];
        content += '<tr><td>' + (i + 1) + '.</td><td>' + score.name + '</td><td>' + score.score + '</td></tr>';
      }
      content = '<table>' + content + '</table>';
      return this.graphic.getWindow($('#win-scores'), header, content);
    };
    this.save = function() {
      var gameState;
      if (!isLocalStorageSupports()) {
        return false;
      }
      gameState = {
        timer: this.timer,
        level: this.level,
        score: this.score,
        correctAnswers: this.correctAnswers,
        achievScore: this.achievScore,
        achievements: this.achievements,
        used: this.used,
        userId: this.userId,
        userName: this.userName,
        lang: this.lang
      };
      return localStorage.setItem('wordGame', JSON.stringify(gameState));
    };
    this.load = function() {
      var gameState, strGameState;
      strGameState = localStorage.getItem('wordGame');
      gameState = JSON.parse(strGameState, function(key, value) {
        if (key === 'date') {
          value = value != null ? value.fromIsoDate() : void 0;
        }
        return value;
      });
      this.timer = gameState.timer;
      this.level = gameState.level;
      this.score = gameState.score;
      this.correctAnswers = gameState.correctAnswers;
      this.achievScore = gameState.achievScore;
      this.achievements = gameState.achievements;
      this.used = gameState.used;
      this.userId = gameState.userId;
      this.userName = gameState.userName;
      this.lang = gameState.lang;
      return this.getLanguage('completeLoad');
    };
    this.completeLoad = function() {
      this.localize();
      this.fillLettersWeights();
      this.initRareLetters();
      this.initAchievements();
      this.populateAnswers();
      this.populateUser();
      this.addScore(0);
      this.graphic.updateLevelBar(this.level, this.score, this.maxLevel, this.nextLevel);
      this.updateLevel();
      this.updateWords();
      this.initControls();
      this.getMainword();
      this.draw();
      this.populateTimer();
      this.updateWords();
      return this.setTimer();
    };
    this.reset = function() {
      localStorage.setItem('wordGame', null);
      return _this.request.get({
        r: 'user/reset'
      }, function() {
        return window.location.reload();
      });
    };
    this.enterUsername = function() {
      var username;
      username = $('#username').val();
      if (!username) {
        return false;
      }
      return _this.request.get({
        r: 'user/enter-username',
        username: username
      }, function(data) {
        if (data.success) {
          _this.userId = data.userId;
          _this.userName = data.userName;
          _this.getMainword();
          _this.fillLettersWeights();
          _this.initAchievements();
          _this.initRareLetters();
          _this.draw();
          _this.populateUser();
          _this.save();
          $('#modal').modal('hide');
          _this.setTimer();
        }
      });
    };
    this.populateAnswers = function() {
      var $answerRow, answer, _i, _len, _ref, _results;
      $('#answerContainer table tbody').empty();
      _ref = this.correctAnswers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        answer = _ref[_i];
        $answerRow = "            <tr><td>" + answer.w + "</td>            <td>" + answer.w.length + "</td><td>" + answer.s + "</td></tr>";
        _results.push($('#answerContainer table tbody').prepend($answerRow));
      }
      return _results;
    };
  };

}).call(this);
